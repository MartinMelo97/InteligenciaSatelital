//Entorno virtual 
apt-get install python-virtualenv

//Crear entorno virtual
virtualenv -p python3 Proyecto
source Proyecto/bin/activate
pip install django
pip freeze

//Crear proyecto
django-admin startproject Proyecto
//Acceder al directorio del proyecto

//Migrar BD
./manage.py migrate

//Crear aplicación "main" (Buena practica).
./manage.py startapp main

//Correr el Servidor
./manage.py runserver

//Vizualizar proyecto en explorador web: 0.0.0.0:8000 / 127.0.0.1:8000


/* CREACIÓN Y MODIFICACIÓN DE ARCHIVOS (SUBLIME)*/
//Editar Archivos
subl .
- Enlistar nombre de aplicaciones creadas en el apartado "INSTALLED_APPS" del archivo settings.py de dir de la misma App.

		# Application definition

		INSTALLED_APPS = [
		    'django.contrib.admin',
		    'django.contrib.auth',
		    'django.contrib.contenttypes',
		    'django.contrib.sessions',
		    'django.contrib.messages',
		    'django.contrib.staticfiles',
		    'main'
		]


- Editar archivo url.py del proyecto; importar views del dir de la App y crear vista.
		
			from django.conf.urls import url
			from django.contrib import admin
	Importar--->	from main import views

			urlpatterns = [
			    url(r'^admin/', admin.site.urls),
	Crear vista--->	    url(r'^$', views.Home.as_view())
		]

- En el archivo views.py de la App importar una vista generica y crear la clase de la vista con funcion get (self,request) y el archivo HTML principal.
			from django.shortcuts import render
Vista generica ---->	from django.views.generic import View

Referencia al modelo -> class Home(View):
				def get(self,request):
				template_name = 'home.html'
				user = request.user
				return render(request,template_name, {'usuario':user})

- Crear directorio "templates" dentro del directorio de la App y cargar archivos HTML


/* Crear Super Usuario*/
./manage.py createsuperuser  

0.0.0.0:8000/admin   ----> Acceso a panel de administración


/*    GIT    */
//Configuración de cuentas en GitHub
git config --global user.name 'Nombre' 
git config --global user.email 'Correo'

//Inicializar GIT (Controlador de versiones)
git init

//Verificar Estatus
git status

//Dar seguimiento a cambios
git add -A

//Commit
git commit -m "Nombre del punto del commit"

//Mostrar commits
a) git log --oneline --graph
b) git log --oneline

//Modificar mensaje del último registro
git commit --amend -m "Modificar mensaje"

//Reset
git reset "codigo del commit"

//Restaurar punto posterior (origen)
git reset --hard ORIG_HEAD

//Commit restauración total
git commit -m "Restauración total"

//Branch
git branch "Rama nueva"
//Checkout
git checkour Master

//Sync con GitHub
git remote add origen "link Github"

//Visualizar conexión remota
git remote -v

//Subir al repositorio remoto
git push -u origen Master






